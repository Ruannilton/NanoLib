{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment NanoLibrary }NanoLibrary}
{\comment Generated by doxygen1.9.3.}
{\creatim \yr2021\mo11\dy7\hr15\min45\sec44}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt NanoLibrary}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Sun Nov 7 2021 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b /home/ruann/NanoLib/src/data_structure/{\b stl_array.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b /home/ruann/NanoLib/src/data_structure/{\b stl_core.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file contais the core functions to others algorithms })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
stl_array.h\par \pard\plain 
{\tc\tcl2 \v /home/ruann/NanoLib/src/data_structure/stl_array.h}
{\xe \v /home/ruann/NanoLib/src/data_structure/stl_array.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef STL_ARRAY_H}\par
00002 {\cf21 #define STL_ARRAY_H}\par
00003 {\cf21 #include "stl_core.h"}\par
00004 \par
00005 {\cf21 #define array(type) __stl_t(type, array)}\par
00006 {\cf21 #define ARRAY_INITIAL_LEN 4}\par
00007 {\cf21 #define stl_declare_array(type)                                                                           \\}\par
00008 {\cf21     typedef struct                                                                                        \\}\par
00009 {\cf21     \{                                                                                                     \\}\par
00010 {\cf21         type *buffer;                                                                                     \\}\par
00011 {\cf21         size_t lenght;                                                                                    \\}\par
00012 {\cf21     \} __stl_t(type, array);                                                                               \\}\par
00013 {\cf21     stl_declare(type);                                                                                    \\}\par
00014 {\cf21                                                                                                           \\}\par
00015 {\cf21     void __stl_fn(type, array, create)(array(type) * arr, size_t lenght);                                 \\}\par
00016 {\cf21     void __stl_fn(type, array, desloc)(array(type) * arr, size_t from, int steps);                        \\}\par
00017 {\cf21     void __stl_fn(type, array, insert)(array(type) * arr, type value, size_t index);                      \\}\par
00018 {\cf21     void __stl_fn(type, array, set)(array(type) * arr, type value, size_t index);                         \\}\par
00019 {\cf21     void __stl_fn(type, array, remove)(array(type) * arr, size_t index);                                  \\}\par
00020 {\cf21     type __stl_fn(type, array, get)(array(type) * arr, size_t index);                                     \\}\par
00021 {\cf21     type __stl_fn(type, array, first)(array(type) * arr);                                                 \\}\par
00022 {\cf21     void __stl_fn(type, array, copy)(array(type) * arr, type * *out, size_t start, size_t end);           \\}\par
00023 {\cf21     void __stl_fn(type, array, clone)(array(type) * arr, type * *out);                                    \\}\par
00024 {\cf21     bool __stl_fn(type, array, equal)(array(type) * a, array(type) * b);                                  \\}\par
00025 {\cf21     void __stl_fn(type, array, fill)(array(type) * arr, type value);                                      \\}\par
00026 {\cf21     int __stl_fn(type, array, find)(array(type) * arr, type value);                                       \\}\par
00027 {\cf21     int __stl_fn(type, array, find_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b));      \\}\par
00028 {\cf21     void __stl_fn(type, array, resize)(array(type) * arr, size_t lenght);                                 \\}\par
00029 {\cf21     size_t __stl_fn(type, array, count)(array(type) * arr, type value);                                   \\}\par
00030 {\cf21     size_t __stl_fn(type, array, count_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b));  \\}\par
00031 {\cf21     bool __stl_fn(type, array, all)(array(type) * arr, type value);                                       \\}\par
00032 {\cf21     bool __stl_fn(type, array, all_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b));      \\}\par
00033 {\cf21     void __stl_fn(type, array, join)(array(type) * a, array(type) * b, size_t lenght_a, size_t lenght_b); \\}\par
00034 {\cf21     void __stl_fn(type, array, reverse)(array(type) * arr);}\par
00035 \par
00036 {\cf21 #define stl_implement_array(type)                                                                        \\}\par
00037 {\cf21     stl_declare_array(type);                                                                             \\}\par
00038 {\cf21     void __stl_fn(type, array, create)(array(type) * arr, size_t lenght)                                 \\}\par
00039 {\cf21     \{                                                                                                    \\}\par
00040 {\cf21         arr->lenght = lenght;                                                                            \\}\par
00041 {\cf21         __stl_fn(type, __base_name, create)(&(arr->buffer), lenght);                                     \\}\par
00042 {\cf21     \}                                                                                                    \\}\par
00043 {\cf21     void __stl_fn(type, array, desloc)(array(type) * arr, size_t from, int steps)                        \\}\par
00044 {\cf21     \{                                                                                                    \\}\par
00045 {\cf21         __stl_fn(type, __base_name, desloc)(arr->buffer, arr->lenght, from, steps);                      \\}\par
00046 {\cf21     \}                                                                                                    \\}\par
00047 {\cf21     void __stl_fn(type, array, insert)(array(type) * arr, type value, size_t index)                      \\}\par
00048 {\cf21     \{                                                                                                    \\}\par
00049 {\cf21         __stl_fn(type, __base_name, insert)(arr->buffer, value, index, arr->lenght);                     \\}\par
00050 {\cf21     \}                                                                                                    \\}\par
00051 {\cf21     void __stl_fn(type, array, set)(array(type) * arr, type value, size_t index)                         \\}\par
00052 {\cf21     \{                                                                                                    \\}\par
00053 {\cf21         __stl_fn(type, __base_name, set)(arr->buffer, value, index);                                     \\}\par
00054 {\cf21     \}                                                                                                    \\}\par
00055 {\cf21     void __stl_fn(type, array, remove)(array(type) * arr, size_t index)                                  \\}\par
00056 {\cf21     \{                                                                                                    \\}\par
00057 {\cf21         __stl_fn(type, __base_name, remove)(arr->buffer, index, arr->lenght);                            \\}\par
00058 {\cf21     \}                                                                                                    \\}\par
00059 {\cf21     type __stl_fn(type, array, get)(array(type) * arr, size_t index)                                     \\}\par
00060 {\cf21     \{                                                                                                    \\}\par
00061 {\cf21         return __stl_fn(type, __base_name, get)(arr->buffer, index);                                     \\}\par
00062 {\cf21     \}                                                                                                    \\}\par
00063 {\cf21     type __stl_fn(type, array, first)(array(type) * arr)                                                 \\}\par
00064 {\cf21     \{                                                                                                    \\}\par
00065 {\cf21         return __stl_fn(type, __base_name, first)(arr->buffer);                                          \\}\par
00066 {\cf21     \}                                                                                                    \\}\par
00067 {\cf21     void __stl_fn(type, array, copy)(array(type) * arr, type * *out, size_t start, size_t end)           \\}\par
00068 {\cf21     \{                                                                                                    \\}\par
00069 {\cf21         __stl_fn(type, __base_name, copy)(arr->buffer, &(arr->buffer), start, end);                      \\}\par
00070 {\cf21     \}                                                                                                    \\}\par
00071 {\cf21     void __stl_fn(type, array, clone)(array(type) * arr, type * *out)                                    \\}\par
00072 {\cf21     \{                                                                                                    \\}\par
00073 {\cf21         __stl_fn(type, __base_name, clone)(arr->buffer, &(arr->buffer), arr->lenght);                    \\}\par
00074 {\cf21     \}                                                                                                    \\}\par
00075 {\cf21     bool __stl_fn(type, array, equal)(array(type) * a, array(type) * b)                                  \\}\par
00076 {\cf21     \{                                                                                                    \\}\par
00077 {\cf21         __stl_fn(type, __base_name, equal)(a->buffer, b->buffer, a->lenght);                             \\}\par
00078 {\cf21     \}                                                                                                    \\}\par
00079 {\cf21     void __stl_fn(type, array, fill)(array(type) * arr, type value)                                      \\}\par
00080 {\cf21     \{                                                                                                    \\}\par
00081 {\cf21         __stl_fn(type, __base_name, fill)(arr->buffer, value, arr->lenght);                              \\}\par
00082 {\cf21     \}                                                                                                    \\}\par
00083 {\cf21     int __stl_fn(type, array, find)(array(type) * arr, type value)                                       \\}\par
00084 {\cf21     \{                                                                                                    \\}\par
00085 {\cf21         return __stl_fn(type, __base_name, find)(arr->buffer, value, arr->lenght);                       \\}\par
00086 {\cf21     \}                                                                                                    \\}\par
00087 {\cf21     int __stl_fn(type, array, find_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b))      \\}\par
00088 {\cf21     \{                                                                                                    \\}\par
00089 {\cf21         return __stl_fn(type, __base_name, find_cmp)(arr->buffer, value, arr->lenght, cmp);              \\}\par
00090 {\cf21     \}                                                                                                    \\}\par
00091 {\cf21     void __stl_fn(type, array, resize)(array(type) * arr, size_t lenght)                                 \\}\par
00092 {\cf21     \{                                                                                                    \\}\par
00093 {\cf21         __stl_fn(type, __base_name, resize)(&(arr->buffer), lenght);                                     \\}\par
00094 {\cf21         arr->lenght = lenght;                                                                            \\}\par
00095 {\cf21     \}                                                                                                    \\}\par
00096 {\cf21     size_t __stl_fn(type, array, count)(array(type) * arr, type value)                                   \\}\par
00097 {\cf21     \{                                                                                                    \\}\par
00098 {\cf21         return __stl_fn(type, __base_name, count)(arr->buffer, value, arr->lenght);                      \\}\par
00099 {\cf21     \}                                                                                                    \\}\par
00100 {\cf21     size_t __stl_fn(type, array, count_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b))  \\}\par
00101 {\cf21     \{                                                                                                    \\}\par
00102 {\cf21         return __stl_fn(type, __base_name, count_cmp)(arr->buffer, value, arr->lenght, cmp);             \\}\par
00103 {\cf21     \}                                                                                                    \\}\par
00104 {\cf21     bool __stl_fn(type, array, all)(array(type) * arr, type value)                                       \\}\par
00105 {\cf21     \{                                                                                                    \\}\par
00106 {\cf21         return __stl_fn(type, __base_name, all)(arr->buffer, value, arr->lenght);                        \\}\par
00107 {\cf21     \}                                                                                                    \\}\par
00108 {\cf21     bool __stl_fn(type, array, all_cmp)(array(type) * arr, type value, bool (*cmp)(type a, type b))      \\}\par
00109 {\cf21     \{                                                                                                    \\}\par
00110 {\cf21         return __stl_fn(type, __base_name, all_cmp)(arr->buffer, value, arr->lenght, cmp);               \\}\par
00111 {\cf21     \}                                                                                                    \\}\par
00112 {\cf21     void __stl_fn(type, array, join)(array(type) * a, array(type) * b, size_t lenght_a, size_t lenght_b) \\}\par
00113 {\cf21     \{                                                                                                    \\}\par
00114 {\cf21         __stl_fn(type, __base_name, join)(&(a->buffer), b->buffer, a->lenght, b->lenght);                \\}\par
00115 {\cf21     \}                                                                                                    \\}\par
00116 {\cf21     void __stl_fn(type, array, reverse)(array(type) * arr)                                               \\}\par
00117 {\cf21     \{                                                                                                    \\}\par
00118 {\cf21         __stl_fn(type, __base_name, reverse)(arr->buffer, arr->lenght);                                  \\}\par
00119 {\cf21     \}}\par
00120 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/ruann/NanoLib/src/data_structure/stl_core.h File Reference\par \pard\plain 
{\tc\tcl2 \v /home/ruann/NanoLib/src/data_structure/stl_core.h}
{\xe \v /home/ruann/NanoLib/src/data_structure/stl_core.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file contais the core functions to others algorithms. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include <string.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b stl_declare}(type)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file contais the core functions to others algorithms. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The most common data structures utilize the same algorithms to do their operations for less duplication code purpose, this algorithms are implemented once in this file and the others data structures call him internally \par
}{
Definition in file {\b stl_core.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v stl_declare\:stl_core.h}
{\xe \v stl_core.h\:stl_declare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define stl_declare( type)}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf18 void} __stl_fn(type, __base_name, create)(type * *buffer, {\cf18 size_t} lenght);                                              \\\par
    void __stl_fn(type, __base_name, desloc)(type * buffer, {\cf18 size_t} lenght, {\cf18 size_t} from, {\cf18 int} steps);                       \\\par
    void __stl_fn(type, __base_name, grow)(type * *buffer, {\cf18 size_t} * lenght);                                              \\\par
    void __stl_fn(type, __base_name, push_back)(type * buffer, type value, {\cf18 size_t} * index);                               \\\par
    void __stl_fn(type, __base_name, insert)(type * buffer, type value, {\cf18 size_t} index, {\cf18 size_t} lenght);                     \\\par
    void __stl_fn(type, __base_name, push_front)(type * buffer, type value, {\cf18 size_t} lenght);                               \\\par
    void __stl_fn(type, __base_name, set)(type * buffer, type value, {\cf18 size_t} index);                                       \\\par
    void __stl_fn(type, __base_name, pop_front)(type * buffer, {\cf18 size_t} lenght);                                            \\\par
    void __stl_fn(type, __base_name, remove)(type * buffer, {\cf18 size_t} index, {\cf18 size_t} lenght);                                 \\\par
    type __stl_fn(type, __base_name, get)(type * buffer, {\cf18 size_t} index);                                                   \\\par
    type __stl_fn(type, __base_name, first)(type * buffer);                                                               \\\par
    void __stl_fn(type, __base_name, copy)(type * buffer, type * *out, {\cf18 size_t} start, {\cf18 size_t} end);                         \\\par
    void __stl_fn(type, __base_name, clone)(type * buffer, type * *out, {\cf18 size_t} lenght);                                   \\\par
    bool __stl_fn(type, __base_name, equal)(type * a, type * b, {\cf18 size_t} lenght);                                           \\\par
    void __stl_fn(type, __base_name, fill)(type * buffer, type value, {\cf18 size_t} lenght);                                     \\\par
    int __stl_fn(type, __base_name, find)(type * buffer, type value, {\cf18 size_t} lenght);                                      \\\par
    int __stl_fn(type, __base_name, find_cmp)(type * buffer, type value, {\cf18 size_t} lenght, bool (*cmp)(type a, type b));     \\\par
    void __stl_fn(type, __base_name, resize)(type * *buffer, {\cf18 size_t} lenght);                                              \\\par
    size_t __stl_fn(type, __base_name, count)(type * buffer, type value, {\cf18 size_t} lenght);                                  \\\par
    size_t __stl_fn(type, __base_name, count_cmp)(type * buffer, type value, {\cf18 size_t} lenght, bool (*cmp)(type a, type b)); \\\par
    bool __stl_fn(type, __base_name, all)(type * buffer, type value, {\cf18 size_t} lenght);                                      \\\par
    bool __stl_fn(type, __base_name, all_cmp)(type * buffer, type value, {\cf18 size_t} lenght, bool (*cmp)(type a, type b));     \\\par
    void __stl_fn(type, __base_name, join)(type * *a, type * b, {\cf18 size_t} lenght_a, {\cf18 size_t} lenght_b);                        \\\par
    void __stl_fn(type, __base_name, reverse)(type * buffer, {\cf18 size_t} lenght);\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Declare the functions to be implemented later with stl_implement {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{The data type for wich the functions will be implemented {\b stl_declare(int)}: stl_core_int_create, stl_core_int_push_back, stl_core_int_insert, [...]\cell }
{\row }
}
{\b stl_declare(float)}: stl_core_float_create, stl_core_float_push_back, stl_core_float_insert, [...] \par
}{
Definition at line {\b 79} of file {\b stl_core.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
stl_core.h\par \pard\plain 
{\tc\tcl2 \v /home/ruann/NanoLib/src/data_structure/stl_core.h}
{\xe \v /home/ruann/NanoLib/src/data_structure/stl_core.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00009 {\cf21 #ifndef _STL_CORE_H}\par
00010 {\cf21 #define _STL_CORE_H}\par
00011 \par
00012 {\cf21 #include <stdlib.h>}\par
00013 {\cf21 #include <stdint.h>}\par
00014 {\cf21 #include <stdbool.h>}\par
00015 {\cf21 #include <string.h>}\par
00016 \par
00017 {\cf21 #pragma region internal_macros}\par
00018 {\cf21 #define __prefix stl_}\par
00019 {\cf21 #define __base_name core}\par
00020 \par
00021 {\cf21 #define _____concat2(A, B) A##B}\par
00022 {\cf21 #define _____concat(A, B) _____concat2(A, B)}\par
00023 \par
00024 {\cf21 #define __stl_fn(type, name, fn) _____concat(_____concat(_____concat(__prefix, _____concat(_____concat(name, _), type)), _), fn)}\par
00025 {\cf21 #define __stl_t(type, name) _____concat(_____concat(_____concat(name, _), type), _t)}\par
00026 \par
00027 {\cf21 #define __unique(name) _____concat(name, _____concat(_____concat(_stl_core_, __LINE__), __COUNTER__))}\par
00028 {\cf21 #pragma endregion}\par
00029 \par
00030 {\cf21 #pragma region iterator}\par
00031 {\cf21 #define stl_declare_iterator(type)                                                        \\}\par
00032 {\cf21     typedef struct                                                                        \\}\par
00033 {\cf21     \{                                                                                     \\}\par
00034 {\cf21         size_t current;                                                                   \\}\par
00035 {\cf21         size_t lenght;                                                                    \\}\par
00036 {\cf21         type *buffer;                                                                     \\}\par
00037 {\cf21     \} __stl_t(type, it);                                                                  \\}\par
00038 {\cf21     __stl_t(type, it) __stl_fn(type, __base_name, it_init)(type * buffer, size_t lenght); \\}\par
00039 {\cf21     const type *__stl_fn(type, __base_name, it_next)(__stl_t(type, it) * it);}\par
00040 \par
00041 {\cf21 #define stl_implement_iterator(type)                                                     \\}\par
00042 {\cf21     __stl_t(type, it) __stl_fn(type, __base_name, it_init)(type * buffer, size_t lenght) \\}\par
00043 {\cf21     \{                                                                                    \\}\par
00044 {\cf21         return (__stl_t(type, it))\{.current = 0, .lenght = lenght, .buffer = buffer\};    \\}\par
00045 {\cf21     \}                                                                                    \\}\par
00046 {\cf21     const type *__stl_fn(type, __base_name, it_next)(__stl_t(type, it) * it)             \\}\par
00047 {\cf21     \{                                                                                    \\}\par
00048 {\cf21         if (it->current < it->lenght)                                                    \\}\par
00049 {\cf21         \{                                                                                \\}\par
00050 {\cf21             type *v = &(it->buffer[it->current]);                                        \\}\par
00051 {\cf21             it->current++;                                                               \\}\par
00052 {\cf21             return v;                                                                    \\}\par
00053 {\cf21         \}                                                                                \\}\par
00054 {\cf21         return NULL;                                                                     \\}\par
00055 {\cf21     \}}\par
00056 \par
00057 {\cf21 #define foreach(type, var, it) \\}\par
00058 {\cf21     for (const type *var = NULL; (var = __stl_fn(type, __base_name, it_next)(&it)) != NULL;)}\par
00059 {\cf21 #pragma endregion}\par
00060 \par
00061 {\cf21 #define stl_declare_alias(type, alias) \\}\par
00062 {\cf21     typedef type alias;                \\}\par
00063 {\cf21     stl_declare(alias)}\par
00064 \par
00079 {\cf21 #define stl_declare(type)                                                                                                 \\}\par
00080 {\cf21     void __stl_fn(type, __base_name, create)(type * *buffer, size_t lenght);                                              \\}\par
00081 {\cf21     void __stl_fn(type, __base_name, desloc)(type * buffer, size_t lenght, size_t from, int steps);                       \\}\par
00082 {\cf21     void __stl_fn(type, __base_name, grow)(type * *buffer, size_t * lenght);                                              \\}\par
00083 {\cf21     void __stl_fn(type, __base_name, push_back)(type * buffer, type value, size_t * index);                               \\}\par
00084 {\cf21     void __stl_fn(type, __base_name, insert)(type * buffer, type value, size_t index, size_t lenght);                     \\}\par
00085 {\cf21     void __stl_fn(type, __base_name, push_front)(type * buffer, type value, size_t lenght);                               \\}\par
00086 {\cf21     void __stl_fn(type, __base_name, set)(type * buffer, type value, size_t index);                                       \\}\par
00087 {\cf21     void __stl_fn(type, __base_name, pop_front)(type * buffer, size_t lenght);                                            \\}\par
00088 {\cf21     void __stl_fn(type, __base_name, remove)(type * buffer, size_t index, size_t lenght);                                 \\}\par
00089 {\cf21     type __stl_fn(type, __base_name, get)(type * buffer, size_t index);                                                   \\}\par
00090 {\cf21     type __stl_fn(type, __base_name, first)(type * buffer);                                                               \\}\par
00091 {\cf21     void __stl_fn(type, __base_name, copy)(type * buffer, type * *out, size_t start, size_t end);                         \\}\par
00092 {\cf21     void __stl_fn(type, __base_name, clone)(type * buffer, type * *out, size_t lenght);                                   \\}\par
00093 {\cf21     bool __stl_fn(type, __base_name, equal)(type * a, type * b, size_t lenght);                                           \\}\par
00094 {\cf21     void __stl_fn(type, __base_name, fill)(type * buffer, type value, size_t lenght);                                     \\}\par
00095 {\cf21     int __stl_fn(type, __base_name, find)(type * buffer, type value, size_t lenght);                                      \\}\par
00096 {\cf21     int __stl_fn(type, __base_name, find_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b));     \\}\par
00097 {\cf21     void __stl_fn(type, __base_name, resize)(type * *buffer, size_t lenght);                                              \\}\par
00098 {\cf21     size_t __stl_fn(type, __base_name, count)(type * buffer, type value, size_t lenght);                                  \\}\par
00099 {\cf21     size_t __stl_fn(type, __base_name, count_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b)); \\}\par
00100 {\cf21     bool __stl_fn(type, __base_name, all)(type * buffer, type value, size_t lenght);                                      \\}\par
00101 {\cf21     bool __stl_fn(type, __base_name, all_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b));     \\}\par
00102 {\cf21     void __stl_fn(type, __base_name, join)(type * *a, type * b, size_t lenght_a, size_t lenght_b);                        \\}\par
00103 {\cf21     void __stl_fn(type, __base_name, reverse)(type * buffer, size_t lenght);}\par
00104 \par
00105 {\cf21 #define stl_implement(type)                                                                                              \\}\par
00106 {\cf21     stl_declare(type);                                                                                                   \\}\par
00107 {\cf21     void __stl_fn(type, __base_name, create)(type * *buffer, size_t lenght)                                              \\}\par
00108 {\cf21     \{                                                                                                                    \\}\par
00109 {\cf21         *buffer = malloc(sizeof(type) * lenght);                                                                         \\}\par
00110 {\cf21     \}                                                                                                                    \\}\par
00111 {\cf21     void __stl_fn(type, __base_name, desloc)(type * buffer, size_t lenght, size_t from, int steps)                       \\}\par
00112 {\cf21     \{                                                                                                                    \\}\par
00113 {\cf21         if (steps > 0)                                                                                                   \\}\par
00114 {\cf21         \{                                                                                                                \\}\par
00115 {\cf21             size_t mv_size = ((lenght - from) - steps) * sizeof(type);                                                   \\}\par
00116 {\cf21             size_t index_to = from + steps;                                                                              \\}\par
00117 {\cf21             if (mv_size > 0 && index_to < lenght)                                                                        \\}\par
00118 {\cf21             \{                                                                                                            \\}\par
00119 {\cf21                 void *pfrom = (void *)(&buffer[from]);                                                                   \\}\par
00120 {\cf21                 void *pto = (void *)(&buffer[index_to]);                                                                 \\}\par
00121 {\cf21                 memmove(pto, pfrom, mv_size);                                                                            \\}\par
00122 {\cf21             \}                                                                                                            \\}\par
00123 {\cf21         \}                                                                                                                \\}\par
00124 {\cf21         else                                                                                                             \\}\par
00125 {\cf21         \{                                                                                                                \\}\par
00126 {\cf21             uint64_t new_index = from + steps;                                                                           \\}\par
00127 {\cf21             uint64_t mv_size = (lenght - new_index) * sizeof(type);                                                      \\}\par
00128 {\cf21             if (mv_size > 0)                                                                                             \\}\par
00129 {\cf21             \{                                                                                                            \\}\par
00130 {\cf21                 void *pfrom = (void *)(&buffer[from]);                                                                   \\}\par
00131 {\cf21                 void *pto = (void *)(&buffer[new_index]);                                                                \\}\par
00132 {\cf21                 memmove(pto, pfrom, mv_size);                                                                            \\}\par
00133 {\cf21             \}                                                                                                            \\}\par
00134 {\cf21         \}                                                                                                                \\}\par
00135 {\cf21     \}                                                                                                                    \\}\par
00136 {\cf21     void __stl_fn(type, __base_name, grow)(type * *buffer, size_t * lenght)                                              \\}\par
00137 {\cf21     \{                                                                                                                    \\}\par
00138 {\cf21         size_t new_len = (*lenght) * 1.5f;                                                                               \\}\par
00139 {\cf21         void *new_ptr = realloc(*buffer, new_len * sizeof(type));                                                        \\}\par
00140 {\cf21         if (new_ptr)                                                                                                     \\}\par
00141 {\cf21         \{                                                                                                                \\}\par
00142 {\cf21             *buffer = new_ptr;                                                                                           \\}\par
00143 {\cf21             *lenght = new_len;                                                                                           \\}\par
00144 {\cf21         \}                                                                                                                \\}\par
00145 {\cf21     \}                                                                                                                    \\}\par
00146 {\cf21     void __stl_fn(type, __base_name, push_back)(type * buffer, type value, size_t * index)                               \\}\par
00147 {\cf21     \{                                                                                                                    \\}\par
00148 {\cf21         buffer[(*index)] = value;                                                                                        \\}\par
00149 {\cf21         *index = (*index) + 1;                                                                                           \\}\par
00150 {\cf21     \}                                                                                                                    \\}\par
00151 {\cf21     void __stl_fn(type, __base_name, insert)(type * buffer, type value, size_t index, size_t lenght)                     \\}\par
00152 {\cf21     \{                                                                                                                    \\}\par
00153 {\cf21         __stl_fn(type, __base_name, desloc)(buffer, lenght, index, 1);                                                   \\}\par
00154 {\cf21         buffer[index] = value;                                                                                           \\}\par
00155 {\cf21     \}                                                                                                                    \\}\par
00156 {\cf21     void __stl_fn(type, __base_name, push_front)(type * buffer, type value, size_t lenght)                               \\}\par
00157 {\cf21     \{                                                                                                                    \\}\par
00158 {\cf21         __stl_fn(type, __base_name, insert)(buffer, value, 0, lenght);                                                   \\}\par
00159 {\cf21     \}                                                                                                                    \\}\par
00160 {\cf21     void __stl_fn(type, __base_name, set)(type * buffer, type value, size_t index)                                       \\}\par
00161 {\cf21     \{                                                                                                                    \\}\par
00162 {\cf21         buffer[index] = value;                                                                                           \\}\par
00163 {\cf21     \}                                                                                                                    \\}\par
00164 {\cf21     void __stl_fn(type, __base_name, pop_front)(type * buffer, size_t lenght)                                            \\}\par
00165 {\cf21     \{                                                                                                                    \\}\par
00166 {\cf21         __stl_fn(type, __base_name, desloc)(buffer, lenght, 1, -1);                                                      \\}\par
00167 {\cf21     \}                                                                                                                    \\}\par
00168 {\cf21     void __stl_fn(type, __base_name, remove)(type * buffer, size_t index, size_t lenght)                                 \\}\par
00169 {\cf21     \{                                                                                                                    \\}\par
00170 {\cf21         if (index != lenght - 1)                                                                                         \\}\par
00171 {\cf21         \{                                                                                                                \\}\par
00172 {\cf21             size_t mv_size = ((lenght - 1) - index) * sizeof(type);                                                      \\}\par
00173 {\cf21             void *pfrom = (void *)(&buffer[index + 1]);                                                                  \\}\par
00174 {\cf21             void *pto = (void *)(&buffer[index]);                                                                        \\}\par
00175 {\cf21             memmove(pto, pfrom, mv_size);                                                                                \\}\par
00176 {\cf21         \}                                                                                                                \\}\par
00177 {\cf21     \}                                                                                                                    \\}\par
00178 {\cf21     type __stl_fn(type, __base_name, get)(type * buffer, size_t index)                                                   \\}\par
00179 {\cf21     \{                                                                                                                    \\}\par
00180 {\cf21         return buffer[index];                                                                                            \\}\par
00181 {\cf21     \}                                                                                                                    \\}\par
00182 {\cf21     type __stl_fn(type, __base_name, first)(type * buffer)                                                               \\}\par
00183 {\cf21     \{                                                                                                                    \\}\par
00184 {\cf21         return buffer[0];                                                                                                \\}\par
00185 {\cf21     \}                                                                                                                    \\}\par
00186 {\cf21     void __stl_fn(type, __base_name, copy)(type * buffer, type * *out, size_t start, size_t end)                         \\}\par
00187 {\cf21     \{                                                                                                                    \\}\par
00188 {\cf21         size_t len = end - start;                                                                                        \\}\par
00189 {\cf21         memcpy(*out, &buffer[start], len * sizeof(type));                                                                \\}\par
00190 {\cf21     \}                                                                                                                    \\}\par
00191 {\cf21     void __stl_fn(type, __base_name, clone)(type * buffer, type * *out, size_t lenght)                                   \\}\par
00192 {\cf21     \{                                                                                                                    \\}\par
00193 {\cf21         memcpy(*out, buffer, lenght * sizeof(type));                                                                     \\}\par
00194 {\cf21     \}                                                                                                                    \\}\par
00195 {\cf21     bool __stl_fn(type, __base_name, equal)(type * a, type * b, size_t lenght)                                           \\}\par
00196 {\cf21     \{                                                                                                                    \\}\par
00197 {\cf21         return memcmp(a, b, lenght * sizeof(type)) == 0;                                                                 \\}\par
00198 {\cf21     \}                                                                                                                    \\}\par
00199 {\cf21     void __stl_fn(type, __base_name, fill)(type * buffer, type value, size_t lenght)                                     \\}\par
00200 {\cf21     \{                                                                                                                    \\}\par
00201 {\cf21         for (size_t i = 0; i < lenght; i++)                                                                              \\}\par
00202 {\cf21         \{                                                                                                                \\}\par
00203 {\cf21             buffer[i] = value;                                                                                           \\}\par
00204 {\cf21         \}                                                                                                                \\}\par
00205 {\cf21     \}                                                                                                                    \\}\par
00206 {\cf21     int __stl_fn(type, __base_name, find)(type * buffer, type value, size_t lenght)                                      \\}\par
00207 {\cf21     \{                                                                                                                    \\}\par
00208 {\cf21         for (uint64_t i = 0; i < lenght; i++)                                                                            \\}\par
00209 {\cf21         \{                                                                                                                \\}\par
00210 {\cf21             if (buffer[i] == value)                                                                                      \\}\par
00211 {\cf21                 return i;                                                                                                \\}\par
00212 {\cf21         \}                                                                                                                \\}\par
00213 {\cf21         return -1;                                                                                                       \\}\par
00214 {\cf21     \}                                                                                                                    \\}\par
00215 {\cf21     int __stl_fn(type, __base_name, find_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b))     \\}\par
00216 {\cf21     \{                                                                                                                    \\}\par
00217 {\cf21         for (uint64_t i = 0; i < lenght; i++)                                                                            \\}\par
00218 {\cf21         \{                                                                                                                \\}\par
00219 {\cf21             if ((*cmp)(buffer[i], value) == true)                                                                        \\}\par
00220 {\cf21                 return i;                                                                                                \\}\par
00221 {\cf21         \}                                                                                                                \\}\par
00222 {\cf21         return -1;                                                                                                       \\}\par
00223 {\cf21     \}                                                                                                                    \\}\par
00224 {\cf21     void __stl_fn(type, __base_name, resize)(type * *buffer, size_t lenght)                                              \\}\par
00225 {\cf21     \{                                                                                                                    \\}\par
00226 {\cf21         void *new_ptr = realloc(*buffer, lenght * sizeof(type));                                                         \\}\par
00227 {\cf21         if (new_ptr)                                                                                                     \\}\par
00228 {\cf21             *buffer = new_ptr;                                                                                           \\}\par
00229 {\cf21     \}                                                                                                                    \\}\par
00230 {\cf21     size_t __stl_fn(type, __base_name, count)(type * buffer, type value, size_t lenght)                                  \\}\par
00231 {\cf21     \{                                                                                                                    \\}\par
00232 {\cf21         size_t count = 0;                                                                                                \\}\par
00233 {\cf21         for (size_t i = 0; i < lenght; i++)                                                                              \\}\par
00234 {\cf21         \{                                                                                                                \\}\par
00235 {\cf21             if (memcmp((void *)&buffer[i], (void *)(&value), sizeof(value)) == 0)                                        \\}\par
00236 {\cf21             \{                                                                                                            \\}\par
00237 {\cf21                 count++;                                                                                                 \\}\par
00238 {\cf21             \}                                                                                                            \\}\par
00239 {\cf21         \}                                                                                                                \\}\par
00240 {\cf21         return count;                                                                                                    \\}\par
00241 {\cf21     \}                                                                                                                    \\}\par
00242 {\cf21     size_t __stl_fn(type, __base_name, count_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b)) \\}\par
00243 {\cf21     \{                                                                                                                    \\}\par
00244 {\cf21         size_t count = 0;                                                                                                \\}\par
00245 {\cf21         for (size_t i = 0; i < lenght; i++)                                                                              \\}\par
00246 {\cf21         \{                                                                                                                \\}\par
00247 {\cf21             if ((*cmp)(buffer[i], value) == true)                                                                        \\}\par
00248 {\cf21             \{                                                                                                            \\}\par
00249 {\cf21                 count++;                                                                                                 \\}\par
00250 {\cf21             \}                                                                                                            \\}\par
00251 {\cf21         \}                                                                                                                \\}\par
00252 {\cf21         return count;                                                                                                    \\}\par
00253 {\cf21     \}                                                                                                                    \\}\par
00254 {\cf21     bool __stl_fn(type, __base_name, all)(type * buffer, type value, size_t lenght)                                      \\}\par
00255 {\cf21     \{                                                                                                                    \\}\par
00256 {\cf21         for (uint64_t i = 0; i < lenght; i++)                                                                            \\}\par
00257 {\cf21         \{                                                                                                                \\}\par
00258 {\cf21             if (!memcmp((void *)&buffer[i], (void *)(&value), sizeof(type)) == 0)                                        \\}\par
00259 {\cf21             \{                                                                                                            \\}\par
00260 {\cf21                 return false;                                                                                            \\}\par
00261 {\cf21             \}                                                                                                            \\}\par
00262 {\cf21         \}                                                                                                                \\}\par
00263 {\cf21         return true;                                                                                                     \\}\par
00264 {\cf21     \}                                                                                                                    \\}\par
00265 {\cf21     bool __stl_fn(type, __base_name, all_cmp)(type * buffer, type value, size_t lenght, bool (*cmp)(type a, type b))     \\}\par
00266 {\cf21     \{                                                                                                                    \\}\par
00267 {\cf21         for (uint64_t i = 0; i < lenght; i++)                                                                            \\}\par
00268 {\cf21         \{                                                                                                                \\}\par
00269 {\cf21             if ((*cmp)(buffer[i], value) != true)                                                                        \\}\par
00270 {\cf21             \{                                                                                                            \\}\par
00271 {\cf21                 return false;                                                                                            \\}\par
00272 {\cf21             \}                                                                                                            \\}\par
00273 {\cf21         \}                                                                                                                \\}\par
00274 {\cf21         return true;                                                                                                     \\}\par
00275 {\cf21     \}                                                                                                                    \\}\par
00276 {\cf21     void __stl_fn(type, __base_name, join)(type * *a, type * b, size_t lenght_a, size_t lenght_b)                        \\}\par
00277 {\cf21     \{                                                                                                                    \\}\par
00278 {\cf21         size_t new_size = sizeof(type) * (lenght_a + lenght_b);                                                          \\}\par
00279 {\cf21         void *new_ptr = realloc(*a, new_size);                                                                           \\}\par
00280 {\cf21         if (new_ptr)                                                                                                     \\}\par
00281 {\cf21         \{                                                                                                                \\}\par
00282 {\cf21             *a = new_ptr;                                                                                                \\}\par
00283 {\cf21             memcpy((void *)((uintptr_t)(*a) + (sizeof(type) * lenght_a)), b, (lenght_b * sizeof(type)));                 \\}\par
00284 {\cf21         \}                                                                                                                \\}\par
00285 {\cf21     \}                                                                                                                    \\}\par
00286 {\cf21     void __stl_fn(type, __base_name, reverse)(type * buffer, size_t lenght)                                              \\}\par
00287 {\cf21     \{                                                                                                                    \\}\par
00288 {\cf21         size_t start = 0;                                                                                                \\}\par
00289 {\cf21         size_t end = lenght - 1;                                                                                         \\}\par
00290 {\cf21                                                                                                                          \\}\par
00291 {\cf21         while (start < end)                                                                                              \\}\par
00292 {\cf21         \{                                                                                                                \\}\par
00293 {\cf21             type tmp = buffer[start];                                                                                    \\}\par
00294 {\cf21             buffer[start] = buffer[end];                                                                                 \\}\par
00295 {\cf21             buffer[end] = tmp;                                                                                           \\}\par
00296 {\cf21             start++;                                                                                                     \\}\par
00297 {\cf21             end--;                                                                                                       \\}\par
00298 {\cf21         \}                                                                                                                \\}\par
00299 {\cf21     \}}\par
00300 {\cf21 #endif}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
