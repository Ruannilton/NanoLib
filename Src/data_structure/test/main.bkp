#include <stdio.h>
#include "../buffer_linear.h"
#include "munit/munit.h"

#define LEN 10

static void *test_array_setup(MunitParameter params[], void *user_data)
{
    array(int) *a = malloc(sizeof(*a));
    array_init(a, LEN);
    for (int i = 0; i < LEN; i++)
    {
        a->buff[i] = 0;
    }
    return (void *)a;
}

static void test_array_init_tear_down(void *fixture)
{
    array(int) *a = fixture;
    array_free(a);
    free(a);
}

int cmp_int(void *a, void *b)
{
    return *(int *)a == *(int *)b;
}

int map_int(int value, int index)
{
    return value *= 2;
}

MunitResult test_array_init(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;

    munit_assert_int(a->lenght, ==, LEN);
    munit_assert_int(a->count, ==, 0);
    munit_assert_not_null(a->buff);
    return MUNIT_OK;
}

MunitResult test_array_get_data_size(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    size_t data_size = array_get_data_size(a);
    munit_assert_int(data_size, ==, 4);
    return MUNIT_OK;
}

MunitResult test_array_push_back(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }

    munit_assert_memory_equal(sizeof(int) * LEN, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_push_front(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};

    for (int i = 0; i < LEN; i++)
    {
        array_push_front(a, i);
    }

    munit_assert_memory_equal(sizeof(int) * LEN, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_insert(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {5, -1, 0, -5, 0, 0, 0, 0, 0, 0};
    array_insert(a, 0, -1);
    array_insert(a, 0, 5);
    array_insert(a, 3, -5);
    munit_assert_memory_equal(sizeof(int) * LEN, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_set(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 0, 0, 0, 0, 2, 0, 0, 0, 0};
    array_set(a, 5, 9);
    array_set(a, 5, -3);
    array_set(a, 5, 2);
    munit_assert_memory_equal(sizeof(int) * LEN, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_pop_back(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_pop_back(a);

    munit_assert_memory_equal(sizeof(int) * a->count, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_pop_front(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_pop_front(a);

    munit_assert_memory_equal(sizeof(int) * a->count, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_remove(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 1, 2, 4, 5, 6, 7, 8, 9, 9};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_remove(a, 3);

    munit_assert_memory_equal(sizeof(int) * a->count, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_get(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    int get = array_get(a, 4);
    munit_assert_int(get, ==, 4);
    return MUNIT_OK;
}

MunitResult test_array_first(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    int get = array_first(a);
    munit_assert_int(get, ==, 0);
    return MUNIT_OK;
}

MunitResult test_array_last(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    int get = array_last(a);
    munit_assert_int(get, ==, 9);
    return MUNIT_OK;
}

MunitResult test_array_clone(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array(int) b;
    array_clone(a, &b);

    munit_assert_int(a->data_size, ==, b.data_size);
    munit_assert_int(a->count, ==, b.count);
    munit_assert_int(a->lenght, ==, b.lenght);
    munit_assert_memory_equal(sizeof(int) * a->count, a->buff, b.buff);

    array_free(&b);
    return MUNIT_OK;
}

MunitResult test_array_equal(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array(int) b;
    array_clone(a, &b);
    int equal = (int)array_equal(a, &b);
    munit_assert_int(equal, ==, 1);

    array_free(&b);
    return MUNIT_OK;
}

MunitResult test_array_fill(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {11, 11, 11, 11, 11, 11, 11, 11, 11, 11};

    array_fill(a, 11);

    munit_assert_memory_equal(sizeof(int) * a->count, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_find(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    int get = array_find(a, 5);
    munit_assert_int(get, ==, 5);
    return MUNIT_OK;
}

MunitResult test_array_find_cmp(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    int get = array_find_cmp(a, 5, cmp_int);
    munit_assert_int(get, ==, 5);
    return MUNIT_OK;
}

MunitResult test_array_resize_down(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 1, 2, 3, 4};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_resize(a, 5);
    munit_assert_memory_equal(a->data_size * a->lenght, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_resize_up(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
    int i = 0;
    for (; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_resize(a, 15);
    for (; i < 15; i++)
    {
        arrray_push_back(a, i);
    }
    munit_assert_memory_equal(a->data_size * a->lenght, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_count_ocurrencies(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cc = 0;
    for (int i = 0; i < LEN; i++)
    {
        int v = i % 2;
        cc += v;
        arrray_push_back(a, v);
    }
    int res = array_count_ocurrencies(a, 1);
    munit_assert_int(res, ==, cc);
    return MUNIT_OK;
}

MunitResult test_array_count_ocurrencies_cmp(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cc = 0;
    for (int i = 0; i < LEN; i++)
    {
        int v = i % 2;
        cc += v;
        arrray_push_back(a, v);
    }
    int res = array_count_ocurrencies_cmp(a, 1, cmp_int);
    munit_assert_int(res, ==, cc);
    return MUNIT_OK;
}

MunitResult test_array_all(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int res = array_all(a, 0);
    munit_assert_int(res, ==, 1);
    return MUNIT_OK;
}

MunitResult test_array_all_cmp(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int res = array_all_cmp(a, 0, cmp_int);
    munit_assert_int(res, ==, 1);
    return MUNIT_OK;
}

MunitResult test_array_join(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    array(int) b;
    array_init(&b, LEN);
    int cmp[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
        arrray_push_back(&b, i);
    }
    array_join(a, &b);
    array_free(&b);
    munit_assert_memory_equal(a->data_size * a->lenght, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_reverse(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_reverse(a);
    munit_assert_memory_equal(a->data_size * a->lenght, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_where(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    int cmp[] = {0, 2, 0, 2, 0, 2, 0, 2, 0, 2};
    for (int i = 0; i < LEN; i++)
    {
        int v = i % 2;
        arrray_push_back(a, v);
    }
    array_where(a, (*__wval) % 2 == 1, (*__wval) *= 2);
    munit_assert_memory_equal(a->data_size * a->lenght, a->buff, cmp);
    return MUNIT_OK;
}

MunitResult test_array_map(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    array(int) b;
    int (*map_fn)(int a, int b) = map_int;
    for (int i = 0; i < LEN; i++)
    {
        int v = i % 2;
        arrray_push_back(a, v);
    }

    array_map(a, map_int, &b);

    int cmp[] = {0, 2, 0, 2, 0, 2, 0, 2, 0, 2};
    munit_assert_memory_equal(b.data_size * b.lenght, b.buff, cmp);
    array_free(&b);
    return MUNIT_OK;
}

MunitResult test_array_zip(const MunitParameter params[], void *user_data)
{
    struct mstr
    {
        char *v;
    };

    struct mstruct
    {
        int a;
        struct mstr b;
    };

    array(int) *a = user_data;
    array(struct mstr) b;
    array(struct mstruct) out;
    array_init(&b, LEN);
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
        arrray_push_back(&b, (struct mstr){.v = "abcde"});
    }

    array_zip(a, &b, &out);

    struct mstruct cmp[] = {
        {.a = 0, .b = {.v = "abcde"}},
        {.a = 1, .b = {.v = "abcde"}},
        {.a = 2, .b = {.v = "abcde"}},
        {.a = 3, .b = {.v = "abcde"}},
        {.a = 4, .b = {.v = "abcde"}},
        {.a = 5, .b = {.v = "abcde"}},
        {.a = 6, .b = {.v = "abcde"}},
        {.a = 7, .b = {.v = "abcde"}},
        {.a = 8, .b = {.v = "abcde"}},
        {.a = 9, .b = {.v = "abcde"}}};
    munit_assert_ptr_not_null(out.buff);
    munit_assert_memory_equal(out.data_size * out.lenght, out.buff, cmp);

    array_free(&b);
    array_free(&out);
    return MUNIT_OK;
}

int sum = 0;
void aux(int v)
{
    sum += v;
}
MunitResult test_array_foreach(const MunitParameter params[], void *user_data)
{
    array(int) *a = user_data;
    for (int i = 0; i < LEN; i++)
    {
        arrray_push_back(a, i);
    }
    array_foreach(a, aux);
    munit_assert_int(sum, ==, (0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9));
    return MUNIT_OK;
}

int main(int argc, const char *argv[])
{
    const MunitTest tests[] = {
        {"/array-init", test_array_init, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-data-size", test_array_get_data_size, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-push-back", test_array_push_back, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-push-front", test_array_push_front, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-insert", test_array_insert, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-set", test_array_set, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-pop-back", test_array_pop_back, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-pop-front", test_array_pop_front, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-remove", test_array_remove, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-get", test_array_get, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-first", test_array_first, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-last", test_array_last, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-clone", test_array_clone, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-equal", test_array_equal, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-count-ocurrencies", test_array_count_ocurrencies, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-resize-up", test_array_resize_up, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-resize-down", test_array_resize_down, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-all", test_array_all, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-all-cmp", test_array_all_cmp, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-join", test_array_join, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-reverse", test_array_reverse, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-where", test_array_where, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-map", test_array_map, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-zip", test_array_zip, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-foreach", test_array_foreach, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-count-ocurrencies-cmp", test_array_count_ocurrencies_cmp, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-fill", test_array_fill, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-find", test_array_find, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {"/array-find-cmp", test_array_find_cmp, test_array_setup, test_array_init_tear_down, MUNIT_TEST_OPTION_NONE, NULL},
        {NULL, NULL, NULL, NULL, MUNIT_SUITE_OPTION_NONE, NULL}};

    MunitSuite suite = {
        "/array-tests",         /* name */
        tests,                  /* tests */
        NULL,                   /* suites */
        1,                      /* iterations */
        MUNIT_SUITE_OPTION_NONE /* options */
    };

    return munit_suite_main(&suite, NULL, argc, argv);
}